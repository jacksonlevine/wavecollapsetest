
mod shader;
mod camera;
mod texture;

use std::{f32::consts::PI, sync::Mutex};

use camera::Camera;
use glfw::{ffi::glfwGetTime, Action, Context, Key};
use gl::{types::*, ShaderSource};
use shader::Shader;
use texture::Texture;
use tracing::info;

use glam::*;

use gl::*;

struct Vars {
    first_mouse: bool,
    mouse_focused: bool,
    sensitivity: f32
}
impl Vars {
    pub fn new() -> Self {
        Self {
            first_mouse: true,
            mouse_focused: false,
            sensitivity: 1.0
        }
    }
}

struct WaveCollapseGame {
    shader: Shader,
    camera: Mutex<Camera>,
    vars: Vars,
    texture: Texture,
    delta_time: f32
}

impl WaveCollapseGame {
    pub fn new() -> Self {
        let texture = Texture::new("world.png").unwrap();
        texture.add_to_unit(0);
        Self {
            shader: Shader::new("oldvert.glsl", "oldfrag.glsl"),
            camera: Mutex::new(Camera::new()),
            vars: Vars::new(),
            texture,
            delta_time: 0.0
        }
    }

    pub fn update(&mut self) {

        static mut PREV_TIME: f32 = 0.0;
        unsafe {
            let current_time = unsafe { glfwGetTime() as f32 };
            self.delta_time = (current_time - PREV_TIME).min(0.05);
            PREV_TIME = current_time;
        }


        {
            let mut cam_lock = self.camera.lock().unwrap();
            unsafe {
                if CONTROLS[0] {
                    let mut dir = cam_lock.direction.clone();
                    dir.y = 0.0;
                    cam_lock.position += dir * self.delta_time;
                }
                if CONTROLS[1] {
                    let mut dir = cam_lock.direction.clone();
                    dir.y = 0.0;
                    cam_lock.position -= dir * self.delta_time;
                }
                if CONTROLS[2] {
                    let mut dir = cam_lock.right.clone();
                    dir.y = 0.0;
                    cam_lock.position -= dir * self.delta_time;
                }
                if CONTROLS[3] {
                    let mut dir = cam_lock.right.clone();
                    dir.y = 0.0;
                    cam_lock.position += dir * self.delta_time;
                }
                if CONTROLS[0] || CONTROLS[1] || CONTROLS[2] || CONTROLS[3] {
                    cam_lock.recalculate();
                }
            }
        }
        
        

        let verts = vec![
            0.19119387865066528, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.005356699228286743, 0.0, 14.0,
            0.0036072134971618652, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.003607332706451416, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.19119399785995483, 0.0053150104358792305, 0.20535674691200256, 0.0, 14.0,
            0.19119387865066528, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.0, 1.0, 0.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            0.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            1.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            1.0, 1.0, 0.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            0.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 1.0, 0.0, 0.0, 14.0,
            1.0, 1.0, 1.0, 0.0, 14.0,
            0.0, 1.0, 0.0, 0.0, 14.0,
            0.0, 1.0, 1.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            0.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            1.0, 1.0, 1.0, 0.0, 14.0,
            1.0, 1.0, 0.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            1.0, 1.0, 0.0, 0.0, 14.0,
            0.0, 1.0, 0.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 1.0, 0.0, 14.0,
            1.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            0.0, 0.8124133348464966, 0.0, 0.0, 14.0,
            0.0, 1.0, 1.0, 0.0, 14.0,
            0.0, 1.0, 0.0, 0.0, 14.0,
            1.0, 1.0, 0.0, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.7948340177536011, 0.0, 14.0,
            0.0014481842517852783, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.001448303461074829, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.7948340177536011, 0.0, 14.0,
            0.18903499841690063, 0.005315005779266357, 0.9948340654373169, 0.0, 14.0,
            0.18903487920761108, 0.8131672143936157, 0.9948340654373169, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.005356699228286743, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.8077343702316284, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.005356699228286743, 0.0, 14.0,
            0.9953210353851318, 0.005315005779266357, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.20535674691200256, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.7991742491722107, 0.0, 14.0,
            0.8077342510223389, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
            0.8077343702316284, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.7991742491722107, 0.0, 14.0,
            0.9953210353851318, 0.0053150104358792305, 0.9991742968559265, 0.0, 14.0,
            0.9953209161758423, 0.8131672143936157, 0.9991742968559265, 0.0, 14.0,
        ];



        let uvs = vec![
            0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.21347180008888245, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.22485822439193726, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20787179470062256, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8583516478538513, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8529762774705887, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.20228278636932373, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.22485822439193726, 0.8418705612421036, 0.0, 0.0,
0.22970059514045715, 0.8473356068134308, 0.0, 0.0,
0.20032274723052979, 0.8528241217136383, 0.0, 0.0,
0.22970059514045715, 0.8528241217136383, 0.0, 0.0,
0.22970059514045715, 0.8528459817171097, 0.0, 0.0,
0.20032274723052979, 0.858334481716156, 0.0, 0.0,
0.22970059514045715, 0.8583344519138336, 0.0, 0.0,
0.22970059514045715, 0.8418252915143967, 0.0, 0.0,
0.20032274723052979, 0.8473138064146042, 0.0, 0.0,
0.22970059514045715, 0.8473138064146042, 0.0, 0.0,
0.22970059514045715, 0.8363149464130402, 0.0, 0.0,
0.20032274723052979, 0.8418034464120865, 0.0, 0.0,
0.22970059514045715, 0.8418034464120865, 0.0, 0.0,
0.22964508831501007, 0.8694746494293213, 0.0, 0.0,
0.2005314975976944, 0.8986676335334778, 0.0, 0.0,
0.22964508831501007, 0.8986676335334778, 0.0, 0.0,
0.22972984611988068, 0.8986686542630196, 0.0, 0.0,
0.2004871666431427, 0.8694868683815002, 0.0, 0.0,
0.2004871666431427, 0.8986686542630196, 0.0, 0.0,
0.22970059514045715, 0.8473356068134308, 0.0, 0.0,
0.20032274723052979, 0.8473356068134308, 0.0, 0.0,
0.20032274723052979, 0.8528241217136383, 0.0, 0.0,
0.22970059514045715, 0.8528459817171097, 0.0, 0.0,
0.20032274723052979, 0.8528459817171097, 0.0, 0.0,
0.20032274723052979, 0.858334481716156, 0.0, 0.0,
0.22970059514045715, 0.8418252915143967, 0.0, 0.0,
0.20032274723052979, 0.8418252915143967, 0.0, 0.0,
0.20032274723052979, 0.8473138064146042, 0.0, 0.0,
0.22970059514045715, 0.8363149464130402, 0.0, 0.0,
0.20032274723052979, 0.8363149464130402, 0.0, 0.0,
0.20032274723052979, 0.8418034464120865, 0.0, 0.0,
0.22964508831501007, 0.8694746494293213, 0.0, 0.0,
0.2005314975976944, 0.8694746494293213, 0.0, 0.0,
0.2005314975976944, 0.8986676335334778, 0.0, 0.0,
0.22972984611988068, 0.8986686542630196, 0.0, 0.0,
0.22972984611988068, 0.8694868683815002, 0.0, 0.0,
0.2004871666431427, 0.8694868683815002, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.21347180008888245, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.22485822439193726, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20787179470062256, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8583516478538513, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8529762774705887, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.20228278636932373, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.22485822439193726, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.21347180008888245, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.22485822439193726, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20787179470062256, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8583516478538513, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8529762774705887, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.20228278636932373, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.22485822439193726, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.21347180008888245, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.22485822439193726, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20787179470062256, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.21347180008888245, 0.8583516478538513, 0.0, 0.0,
0.2078828066587448, 0.8637157380580902, 0.0, 0.0,
0.2078828066587448, 0.8583516478538513, 0.0, 0.0,
0.22485822439193726, 0.8529762774705887, 0.0, 0.0,
0.20228278636932373, 0.8583403676748276, 0.0, 0.0,
0.20228278636932373, 0.8529762774705887, 0.0, 0.0,
0.20787179470062256, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8637157380580902, 0.0, 0.0,
0.20228278636932373, 0.8583516478538513, 0.0, 0.0,
0.20228278636932373, 0.8529649972915649, 0.0, 0.0,
0.22485822439193726, 0.8476009219884872, 0.0, 0.0,
0.22485822439193726, 0.8529649972915649, 0.0, 0.0,
0.20228278636932373, 0.8361402601003647, 0.0, 0.0,
0.22485822439193726, 0.8418593257665634, 0.0, 0.0,
0.20228278636932373, 0.8418593257665634, 0.0, 0.0,
0.22485822439193726, 0.8475896418094635, 0.0, 0.0,
0.20228278636932373, 0.8418705612421036, 0.0, 0.0,
0.22485822439193726, 0.8418705612421036, 0.0, 0.0,

        ];


        static mut VVBO: GLuint = 0;
        static mut UVVBO: GLuint = 0;
        unsafe {
            if VVBO == 0 {
                gl::CreateBuffers(1, &mut VVBO);
                gl::CreateBuffers(1, &mut UVVBO);
            }
        }
        




        unsafe {
            self.draw_old_geometry(VVBO, UVVBO, verts, uvs);
        }
        
    }

    



    pub fn cursor_pos(&mut self, xpos: f64, ypos: f64) {
        if self.vars.mouse_focused {
            static mut LASTX: f64 = 0.0;
            static mut LASTY: f64 = 0.0;

            if self.vars.first_mouse {
                unsafe {
                    LASTX = xpos;
                    LASTY = ypos;
                }
                self.vars.first_mouse = false;
            }

            unsafe {
                let x_offset = (xpos - LASTX) * self.vars.sensitivity as f64;
                let y_offset = (LASTY - ypos) * self.vars.sensitivity as f64;

                LASTY = ypos;
                LASTX = xpos;

                let mut camlock = self.camera.lock().unwrap();

                camlock.yaw += x_offset as f32;
                camlock.pitch += y_offset as f32;

                camlock.pitch = camlock.pitch.clamp(-89.0, 89.0);

                camlock.direction.x =
                    camlock.yaw.to_radians().cos() as f32 * camlock.pitch.to_radians().cos() as f32;
                camlock.direction.y = camlock.pitch.to_radians().sin();
                camlock.direction.z =
                    camlock.yaw.to_radians().sin() * camlock.pitch.to_radians().cos();
                camlock.direction = camlock.direction.normalize();

                camlock.right = Vec3::new(0.0, 1.0, 0.0)
                    .cross(camlock.direction)
                    .normalize();
                camlock.up = camlock.direction.cross(camlock.right).normalize();

                camlock.recalculate();
                #[cfg(feature = "show_cam_pos")]
                println!(
                    "Cam dir: {}, {}, {}",
                    camlock.direction.x, camlock.direction.y, camlock.direction.z
                );
            }
        }

        
    }

    pub fn set_mouse_focused(&mut self, tf: bool) {
        if tf {
            self.vars.mouse_focused = true;
        } else {
            self.vars.mouse_focused = false;
            self.vars.first_mouse = true;
        }
    }





    



pub fn draw_old_geometry(&self, vvbo: GLuint, uvvbo: GLuint, vdata: Vec<f32>, uvdata: Vec<f32>) {


    unsafe {
        gl::BindVertexArray(self.shader.vao);
        gl::UseProgram(self.shader.shader_id);
    }
    
        static mut MVP_LOC: i32 = -1;
        static mut CAM_POS_LOC: i32 = 0;
        static mut AMBIENT_BRIGHT_MULT_LOC: i32 = 0;
        static mut VIEW_DISTANCE_LOC: i32 = 0;
        static mut UNDERWATER_LOC: i32 = 0;
        static mut CAM_DIR_LOC: i32 = 0;
        static mut SUNSET_LOC: i32 = 0;
        static mut SUNRISE_LOC: i32 = 0;
        static mut WALKBOB_LOC: i32 = 0;
        unsafe {
            if MVP_LOC == -1 {

                MVP_LOC =
                    gl::GetUniformLocation(self.shader.shader_id, b"mvp\0".as_ptr() as *const i8);
                //info!("MVP LOC: {}", MVP_LOC);

                WALKBOB_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"walkbob\0".as_ptr() as *const i8,
                );

                CAM_POS_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"camPos\0".as_ptr() as *const i8,
                );
                AMBIENT_BRIGHT_MULT_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"ambientBrightMult\0".as_ptr() as *const i8,
                );
                VIEW_DISTANCE_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"viewDistance\0".as_ptr() as *const i8,
                );
                UNDERWATER_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"underWater\0".as_ptr() as *const i8,
                );
                CAM_DIR_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"camDir\0".as_ptr() as *const i8,
                );
                SUNSET_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"sunset\0".as_ptr() as *const i8,
                );
                SUNRISE_LOC = gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"sunrise\0".as_ptr() as *const i8,
                );
            }
            let  cam_lock = self.camera.lock().unwrap();



            gl::UniformMatrix4fv(MVP_LOC, 1, gl::FALSE, cam_lock.mvp.to_cols_array().as_ptr());
            gl::Uniform3f(
                CAM_POS_LOC,
                cam_lock.position.x,
                cam_lock.position.y,
                cam_lock.position.z,
            );
            gl::Uniform1f(AMBIENT_BRIGHT_MULT_LOC, 1.0);
            gl::Uniform1f(VIEW_DISTANCE_LOC, 8.0);
            gl::Uniform1f(UNDERWATER_LOC, 0.0);
            gl::Uniform3f(
                CAM_DIR_LOC,
                cam_lock.direction.x,
                cam_lock.direction.y,
                cam_lock.direction.z,
            );
            gl::Uniform1f(SUNSET_LOC, 0.0);
            gl::Uniform1f(WALKBOB_LOC, 0.0);
            gl::Uniform1f(SUNRISE_LOC, 0.0);
            gl::Uniform1i(
                gl::GetUniformLocation(
                    self.shader.shader_id,
                    b"ourTexture\0".as_ptr() as *const i8,
                ),
                0,
            );
            // let fc = Planets::get_fog_col(self.chunksys.read().unwrap().planet_type as u32);
            // gl::Uniform4f(
            //     FOGCOL_LOC,
            //     fc.0, 
            //     fc.1,
            //     fc.2,
            //     fc.3
            // );

            drop(cam_lock);
        }

        bind_old_geometry(vvbo, uvvbo, vdata.as_slice(), uvdata.as_slice(), &self.shader);



        unsafe {
            //gl::Disable(gl::CULL_FACE);
            gl::DrawArrays(gl::TRIANGLES, 0, vdata.len() as i32 / 5);
            let error = gl::GetError();
            if error != gl::NO_ERROR {
                info!("OpenGL Error after drawing arrays: {}", error);
            }
            //gl::Enable(gl::CULL_FACE);
            // info!("Chunk rending!");
        }
    }
}






pub fn bind_old_geometry(
    vbov: GLuint,
    vbouv: GLuint,
    vdata: &[f32],
    uvdata: &[f32],
    shader: &Shader,
) {
    unsafe {
        // Upload vertex data to named buffer
        gl::NamedBufferData(
            vbov,
            (vdata.len() * std::mem::size_of::<f32>()) as GLsizeiptr,
            vdata.as_ptr() as *const GLvoid,
            gl::STATIC_DRAW,
        );
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("Bind world geom err (vbov): {}", error);
        }

        // Bind vertex buffer to the vertex array object
        gl::VertexArrayVertexBuffer(shader.vao, 0, vbov, 0, (5 * std::mem::size_of::<f32>()) as GLsizei);
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("OpenGL Error after associating vbov with vao: {}", error);
        }

        // Position attribute
        let pos_attrib = gl::GetAttribLocation(shader.shader_id, b"position\0".as_ptr() as *const i8);
        if pos_attrib == -1 {
            info!("Error: position attribute not found in shader.");
        } else {
            gl::EnableVertexArrayAttrib(shader.vao, pos_attrib as GLuint);
            gl::VertexArrayAttribFormat(
                shader.vao,
                pos_attrib as GLuint,
                3,
                gl::FLOAT,
                gl::FALSE,
                0,
            );
            gl::VertexArrayAttribBinding(shader.vao, pos_attrib as GLuint, 0);
        }

        // Block brightness attribute
        let brightness_attrib = gl::GetAttribLocation(shader.shader_id, b"blockRgb\0".as_ptr() as *const i8);
        if brightness_attrib == -1 {
            info!("Error: blockRgb attribute not found in shader.");
        } else {
            gl::EnableVertexArrayAttrib(shader.vao, brightness_attrib as GLuint);
            gl::VertexArrayAttribIFormat(
                shader.vao,
                brightness_attrib as GLuint,
                1,
                gl::UNSIGNED_INT,
                (3 * std::mem::size_of::<f32>()) as GLuint,
            );
            gl::VertexArrayAttribBinding(shader.vao, brightness_attrib as GLuint, 0);
        }

        // Ambient brightness attribute
        let amb_brightness = gl::GetAttribLocation(shader.shader_id, b"ambientBright\0".as_ptr() as *const i8);
        if amb_brightness == -1 {
            info!("Error: ambientBright attribute not found in shader.");
        } else {
            gl::EnableVertexArrayAttrib(shader.vao, amb_brightness as GLuint);
            gl::VertexArrayAttribFormat(
                shader.vao,
                amb_brightness as GLuint,
                1,
                gl::FLOAT,
                gl::FALSE,
                (4 * std::mem::size_of::<f32>()) as GLuint,
            );
            gl::VertexArrayAttribBinding(shader.vao, amb_brightness as GLuint, 0);
        }

        // Upload UV data to named buffer
        gl::NamedBufferData(
            vbouv,
            (uvdata.len() * std::mem::size_of::<f32>()) as GLsizeiptr,
            uvdata.as_ptr() as *const GLvoid,
            gl::STATIC_DRAW,
        );
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("Bind world geom err (vbouv): {}", error);
        }

        // Bind UV buffer to the vertex array object
        gl::VertexArrayVertexBuffer(shader.vao, 1, vbouv, 0, (4 * std::mem::size_of::<f32>()) as GLsizei);
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("OpenGL Error after associating vbouv with vao: {}", error);
        }

        // UV attribute
        let uv_attrib = gl::GetAttribLocation(shader.shader_id, b"uv\0".as_ptr() as *const i8);
        if uv_attrib == -1 {
            info!("Error: uv attribute not found in shader.");
        } else {
            gl::EnableVertexArrayAttrib(shader.vao, uv_attrib as GLuint);
            gl::VertexArrayAttribFormat(
                shader.vao,
                uv_attrib as GLuint,
                2,
                gl::FLOAT,
                gl::FALSE,
                0,
            );
            gl::VertexArrayAttribBinding(shader.vao, uv_attrib as GLuint, 1);
        }
    }
}





pub static mut CONTROLS: [bool; 4] = [
    false, //f
    false, //b
    false, //r
    false //l
];


fn main() {
    let mut glfw = glfw::init(glfw::fail_on_errors).unwrap();


    glfw.window_hint(glfw::WindowHint::ContextVersionMajor(4));
    glfw.window_hint(glfw::WindowHint::ContextVersionMinor(1));
    glfw.window_hint(glfw::WindowHint::OpenGlForwardCompat(true));
    glfw.window_hint(glfw::WindowHint::OpenGlProfile(glfw::OpenGlProfileHint::Core));



    let (mut window, events) = glfw.create_window(1280, 720, "3d test", glfw::WindowMode::Windowed)
        .expect("Failed to create GLFW window.");

    window.set_key_polling(true);
    window.set_mouse_button_polling(true);
    window.set_cursor_pos_polling(true);
    window.make_current();

    gl::load_with(|s| window.get_proc_address(s));


    unsafe {
        gl::Enable(gl::DEPTH_TEST);
        gl::DepthFunc(gl::LESS);
        gl::Enable(gl::BLEND);
        gl::BlendFunc(gl::SRC_ALPHA, gl::ONE_MINUS_SRC_ALPHA);
        gl::Enable(gl::CULL_FACE);
        gl::CullFace(gl::BACK);
        gl::FrontFace(gl::CW);
    }


    let mut testthing = WaveCollapseGame::new();

    while !window.should_close() {

        unsafe {
            gl::Clear(gl::COLOR_BUFFER_BIT | gl::DEPTH_BUFFER_BIT);
            gl::ClearColor(0.0, 0.0, 0.0, 1.0);
        }
        
        testthing.update();


        window.swap_buffers();

        glfw.poll_events();
        for (_, event) in glfw::flush_messages(&events) {
            match event {
                glfw::WindowEvent::Key(Key::Escape, _, Action::Press, _) => {
                    window.set_should_close(true)
                }
                glfw::WindowEvent::Key(key, _, action, _) => {
                    match key {
                        Key::W => {
                            unsafe {
                                CONTROLS[0] = (action == Action::Press || action == Action::Repeat);
                            }
                            
                        }
                        Key::S => {
                            unsafe {
                                CONTROLS[1] = (action == Action::Press || action == Action::Repeat);
                            }
                            
                        }
                        Key::D => {
                            unsafe {
                                CONTROLS[2] = (action == Action::Press || action == Action::Repeat);
                            }
                            
                        }
                        Key::A => {
                            unsafe {
                                CONTROLS[3] = (action == Action::Press || action == Action::Repeat);
                            }
                            
                        }
                        _ => {

                        }
                    }
                }
                glfw::WindowEvent::MouseButton(mousebutton, action, _) => {


                        if mousebutton == glfw::MouseButtonLeft {
                                        if action == Action::Press {
                                            window.set_cursor_mode(glfw::CursorMode::Disabled);
                                            testthing.set_mouse_focused(true);
                                        }
                                   
                   
                            
                        }
                    
                        
                }
                glfw::WindowEvent::CursorPos(xpos, ypos) => {

                    testthing.cursor_pos(xpos, ypos);

                    
                }
                _ => {}

                
            }
        }
    }
}


pub fn bind_old_geometry_no_upload(
    vbov: GLuint,
    vbouv: GLuint,
    shader: &Shader,
) {
    unsafe {


        // Bind vertex buffer to the vertex array object
        gl::VertexArrayVertexBuffer(shader.vao, 0, vbov, 0, (5 * std::mem::size_of::<f32>()) as GLsizei);
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("OpenGL Error after associating vbov with vao: {}", error);
        }

        // Position attribute
        let pos_attrib = gl::GetAttribLocation(shader.shader_id, b"position\0".as_ptr() as *const i8);
        gl::EnableVertexArrayAttrib(shader.vao, pos_attrib as GLuint);
        gl::VertexArrayAttribFormat(
            shader.vao,
            pos_attrib as GLuint,
            3,
            gl::FLOAT,
            gl::FALSE,
            0,
        );
        gl::VertexArrayAttribBinding(shader.vao, pos_attrib as GLuint, 0);

        // Block brightness attribute
        let brightness_attrib = gl::GetAttribLocation(shader.shader_id, b"blockRgb\0".as_ptr() as *const i8);
        gl::EnableVertexArrayAttrib(shader.vao, brightness_attrib as GLuint);
        gl::VertexArrayAttribIFormat(
            shader.vao,
            brightness_attrib as GLuint,
            1,
            gl::UNSIGNED_INT,
            (3 * std::mem::size_of::<u32>()) as GLuint,
        );
        gl::VertexArrayAttribBinding(shader.vao, brightness_attrib as GLuint, 0);

        // Ambient brightness attribute
        let amb_brightness = gl::GetAttribLocation(shader.shader_id, b"ambientBright\0".as_ptr() as *const i8);
        gl::EnableVertexArrayAttrib(shader.vao, amb_brightness as GLuint);
        gl::VertexArrayAttribFormat(
            shader.vao,
            amb_brightness as GLuint,
            1,
            gl::FLOAT,
            gl::FALSE,
            (4 * std::mem::size_of::<f32>()) as GLuint,
        );
        gl::VertexArrayAttribBinding(shader.vao, amb_brightness as GLuint, 0);


        // Bind UV buffer to the vertex array object
        gl::VertexArrayVertexBuffer(shader.vao, 1, vbouv, 0, (4 * std::mem::size_of::<f32>()) as GLsizei);
        let error = gl::GetError();
        if error != gl::NO_ERROR {
            info!("OpenGL Error after associating vbouv with vao: {}", error);
        }

        // UV attribute
        let uv_attrib = gl::GetAttribLocation(shader.shader_id, b"uv\0".as_ptr() as *const i8);
        gl::EnableVertexArrayAttrib(shader.vao, uv_attrib as GLuint);
        gl::VertexArrayAttribFormat(
            shader.vao,
            uv_attrib as GLuint,
            2,
            gl::FLOAT,
            gl::FALSE,
            0,
        );
        gl::VertexArrayAttribBinding(shader.vao, uv_attrib as GLuint, 1);

        // // UV base attribute
        // let uv_attrib2 = gl::GetAttribLocation(shader.shader_id, b"uvbase\0".as_ptr() as *const i8);
        // gl::EnableVertexArrayAttrib(shader.vao, uv_attrib2 as GLuint);
        // gl::VertexArrayAttribFormat(
        //     shader.vao,
        //     uv_attrib2 as GLuint,
        //     2,
        //     gl::FLOAT,
        //     gl::FALSE,
        //     (2 * std::mem::size_of::<f32>()) as GLuint,
        // );
        // gl::VertexArrayAttribBinding(shader.vao, uv_attrib2 as GLuint, 1);
    }
}
